{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","App","useState","message","setMessage","receivedMessages","setReceivedMessages","displayName","setDisplayName","displayNameInput","setDisplayNameInput","useEffect","on","prevState","className","map","item","index","type","value","onChange","event","target","onClick","emit","for","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAIMA,EAASC,IAAG,0CA2DHC,MAzDf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEmCF,mBAAS,IAF5C,mBAENG,EAFM,KAEYC,EAFZ,OAGyBJ,mBAAS,MAHlC,mBAGNK,EAHM,KAGOC,EAHP,OAImCN,mBAAS,IAJ5C,mBAINO,EAJM,KAIYC,EAJZ,KA6Bb,OAvBAC,qBAAU,WACRZ,EAAOa,GAAG,WAAW,SAAAT,GACnBG,GAAoB,SAAAO,GAAS,4BAAQA,GAAR,CAAmBV,YAEjD,IAoBD,qBAAKW,UAAU,YAAf,SACGP,EACC,qCACE,6BACGF,EAAiBU,KAAI,SAACC,EAAMC,GAAP,OACpB,6BAAiBD,GAARC,QAGb,uBAAOC,KAAK,OAAOC,MAAOhB,EAASiB,SArBnB,SAAAC,GACtBjB,EAAWiB,EAAMC,OAAOH,UAqBlB,wBAAQI,QA3BI,WAClBxB,EAAOyB,KAAK,UAAZ,UAA0BjB,EAA1B,aAA0CJ,IAC1CC,EAAW,KAyBL,qBAGF,qCACE,uBAAOqB,IAAI,eAAX,0BACA,uBACA,uBACEP,KAAK,OACLC,MAAOV,EACPW,SA3BuB,SAAAC,GAC/BX,EAAoBW,EAAMC,OAAOH,UA4B3B,wBAAQI,QAzBU,WACxBf,EAAeC,IAwBT,0BC5CKiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bc52e145.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport io from \"socket.io-client\";\n\nconst socket = io('https://chat-rc-backend.herokuapp.com/');\n\nfunction App() {\n  const [message, setMessage] = useState(\"\");\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const [displayName, setDisplayName] = useState(null);\n  const [displayNameInput, setDisplayNameInput] = useState(\"\");\n\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      setReceivedMessages(prevState => [...prevState, message]);\n    });\n  }, []);\n\n  const sendMessage = () => {\n    socket.emit(\"message\", `${displayName}: ${message}`);\n    setMessage(\"\");\n  };\n\n  const onUpdateMessage = event => {\n    setMessage(event.target.value);\n  };\n\n  const onUpdateDisplayNameInput = event => {\n    setDisplayNameInput(event.target.value);\n  };\n\n  const updateDisplayName = () => {\n    setDisplayName(displayNameInput);\n  };\n\n  return (\n    <div className=\"container\">\n      {displayName ? (\n        <>\n          <ul>\n            {receivedMessages.map((item, index) => (\n              <li key={index}>{item}</li>\n            ))}\n          </ul>\n          <input type=\"text\" value={message} onChange={onUpdateMessage} />\n          <button onClick={sendMessage}>SEND</button>\n        </>\n      ) : (\n        <>\n          <label for=\"display-name\">Display Name</label>\n          <br />\n          <input\n            type=\"text\"\n            value={displayNameInput}\n            onChange={onUpdateDisplayNameInput}\n          />\n          <button onClick={updateDisplayName}>SUBMIT</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}